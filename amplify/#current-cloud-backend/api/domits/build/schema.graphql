type Chat @aws_iam @aws_cognito_user_pools {
  id: ID!
  text: String!
  email: String
  recipientEmail: String
  isRead: Boolean
  sortKey: String
  createdAt: String
  updatedAt: AWSDateTime!
}

type Accommodation @aws_api_key @aws_iam {
  id: ID!
  accommodation: String
  description: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type User @aws_api_key @aws_iam {
  id: ID!
  email: String!
  password: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Todo @aws_api_key @aws_iam {
  id: ID!
  name: String!
  description: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelChatConnection @aws_iam @aws_cognito_user_pools {
  items: [Chat]!
  nextToken: String
}

input ModelChatFilterInput {
  id: ModelIDInput
  text: ModelStringInput
  email: ModelStringInput
  recipientEmail: ModelStringInput
  isRead: ModelBooleanInput
  sortKey: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelChatFilterInput]
  or: [ModelChatFilterInput]
  not: ModelChatFilterInput
}

type Query {
  getChat(id: ID!): Chat @aws_iam @aws_cognito_user_pools
  listChats(filter: ModelChatFilterInput, limit: Int, nextToken: String): ModelChatConnection @aws_iam @aws_cognito_user_pools
  getAccommodation(id: ID!): Accommodation @aws_api_key @aws_iam
  listAccommodations(filter: ModelAccommodationFilterInput, limit: Int, nextToken: String): ModelAccommodationConnection @aws_api_key @aws_iam
  getUser(id: ID!): User @aws_api_key @aws_iam
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection @aws_api_key @aws_iam
  getTodo(id: ID!): Todo @aws_api_key @aws_iam
  listTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection @aws_api_key @aws_iam
}

input ModelChatConditionInput {
  text: ModelStringInput
  email: ModelStringInput
  recipientEmail: ModelStringInput
  isRead: ModelBooleanInput
  sortKey: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelChatConditionInput]
  or: [ModelChatConditionInput]
  not: ModelChatConditionInput
  updatedAt: ModelStringInput
}

input CreateChatInput {
  id: ID
  text: String!
  email: String
  recipientEmail: String
  isRead: Boolean
  sortKey: String
  createdAt: String
}

input UpdateChatInput {
  id: ID!
  text: String
  email: String
  recipientEmail: String
  isRead: Boolean
  sortKey: String
  createdAt: String
}

input DeleteChatInput {
  id: ID!
}

type Mutation {
  createChat(input: CreateChatInput!, condition: ModelChatConditionInput): Chat @aws_iam @aws_cognito_user_pools
  updateChat(input: UpdateChatInput!, condition: ModelChatConditionInput): Chat @aws_iam @aws_cognito_user_pools
  deleteChat(input: DeleteChatInput!, condition: ModelChatConditionInput): Chat @aws_iam @aws_cognito_user_pools
  createAccommodation(input: CreateAccommodationInput!, condition: ModelAccommodationConditionInput): Accommodation @aws_api_key @aws_iam
  updateAccommodation(input: UpdateAccommodationInput!, condition: ModelAccommodationConditionInput): Accommodation @aws_api_key @aws_iam
  deleteAccommodation(input: DeleteAccommodationInput!, condition: ModelAccommodationConditionInput): Accommodation @aws_api_key @aws_iam
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  createTodo(input: CreateTodoInput!, condition: ModelTodoConditionInput): Todo @aws_api_key @aws_iam
  updateTodo(input: UpdateTodoInput!, condition: ModelTodoConditionInput): Todo @aws_api_key @aws_iam
  deleteTodo(input: DeleteTodoInput!, condition: ModelTodoConditionInput): Todo @aws_api_key @aws_iam
}

input ModelSubscriptionChatFilterInput {
  id: ModelSubscriptionIDInput
  text: ModelSubscriptionStringInput
  email: ModelSubscriptionStringInput
  recipientEmail: ModelSubscriptionStringInput
  isRead: ModelSubscriptionBooleanInput
  sortKey: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionChatFilterInput]
  or: [ModelSubscriptionChatFilterInput]
}

type Subscription {
  onCreateChat(filter: ModelSubscriptionChatFilterInput): Chat @aws_subscribe(mutations: ["createChat"]) @aws_iam @aws_cognito_user_pools
  onUpdateChat(filter: ModelSubscriptionChatFilterInput): Chat @aws_subscribe(mutations: ["updateChat"]) @aws_iam @aws_cognito_user_pools
  onDeleteChat(filter: ModelSubscriptionChatFilterInput): Chat @aws_subscribe(mutations: ["deleteChat"]) @aws_iam @aws_cognito_user_pools
  onCreateAccommodation(filter: ModelSubscriptionAccommodationFilterInput): Accommodation @aws_subscribe(mutations: ["createAccommodation"]) @aws_api_key @aws_iam
  onUpdateAccommodation(filter: ModelSubscriptionAccommodationFilterInput): Accommodation @aws_subscribe(mutations: ["updateAccommodation"]) @aws_api_key @aws_iam
  onDeleteAccommodation(filter: ModelSubscriptionAccommodationFilterInput): Accommodation @aws_subscribe(mutations: ["deleteAccommodation"]) @aws_api_key @aws_iam
  onCreateUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["createUser"]) @aws_api_key @aws_iam
  onUpdateUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["updateUser"]) @aws_api_key @aws_iam
  onDeleteUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["deleteUser"]) @aws_api_key @aws_iam
  onCreateTodo(filter: ModelSubscriptionTodoFilterInput): Todo @aws_subscribe(mutations: ["createTodo"]) @aws_api_key @aws_iam
  onUpdateTodo(filter: ModelSubscriptionTodoFilterInput): Todo @aws_subscribe(mutations: ["updateTodo"]) @aws_api_key @aws_iam
  onDeleteTodo(filter: ModelSubscriptionTodoFilterInput): Todo @aws_subscribe(mutations: ["deleteTodo"]) @aws_api_key @aws_iam
}

type ModelAccommodationConnection @aws_api_key @aws_iam {
  items: [Accommodation]!
  nextToken: String
}

input ModelAccommodationFilterInput {
  id: ModelIDInput
  accommodation: ModelStringInput
  description: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelAccommodationFilterInput]
  or: [ModelAccommodationFilterInput]
  not: ModelAccommodationFilterInput
}

input ModelAccommodationConditionInput {
  accommodation: ModelStringInput
  description: ModelStringInput
  and: [ModelAccommodationConditionInput]
  or: [ModelAccommodationConditionInput]
  not: ModelAccommodationConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateAccommodationInput {
  id: ID
  accommodation: String
  description: String
}

input UpdateAccommodationInput {
  id: ID!
  accommodation: String
  description: String
}

input DeleteAccommodationInput {
  id: ID!
}

input ModelSubscriptionAccommodationFilterInput {
  id: ModelSubscriptionIDInput
  accommodation: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionAccommodationFilterInput]
  or: [ModelSubscriptionAccommodationFilterInput]
}

type ModelUserConnection @aws_api_key @aws_iam {
  items: [User]!
  nextToken: String
}

input ModelUserFilterInput {
  id: ModelIDInput
  email: ModelStringInput
  password: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input ModelUserConditionInput {
  email: ModelStringInput
  password: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateUserInput {
  id: ID
  email: String!
  password: String!
}

input UpdateUserInput {
  id: ID!
  email: String
  password: String
}

input DeleteUserInput {
  id: ID!
}

input ModelSubscriptionUserFilterInput {
  id: ModelSubscriptionIDInput
  email: ModelSubscriptionStringInput
  password: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserFilterInput]
  or: [ModelSubscriptionUserFilterInput]
}

type ModelTodoConnection @aws_api_key @aws_iam {
  items: [Todo]!
  nextToken: String
}

input ModelTodoFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  description: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelTodoFilterInput]
  or: [ModelTodoFilterInput]
  not: ModelTodoFilterInput
}

input ModelTodoConditionInput {
  name: ModelStringInput
  description: ModelStringInput
  and: [ModelTodoConditionInput]
  or: [ModelTodoConditionInput]
  not: ModelTodoConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateTodoInput {
  id: ID
  name: String!
  description: String
}

input UpdateTodoInput {
  id: ID!
  name: String
  description: String
}

input DeleteTodoInput {
  id: ID!
}

input ModelSubscriptionTodoFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionTodoFilterInput]
  or: [ModelSubscriptionTodoFilterInput]
}
