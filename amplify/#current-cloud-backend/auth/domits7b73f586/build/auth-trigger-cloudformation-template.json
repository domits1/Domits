{
  "Description": "Custom Resource stack for Auth Trigger created using Amplify CLI",
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "env": {
      "Type": "String"
    },
    "userpoolId": {
      "Type": "String"
    },
    "userpoolArn": {
      "Type": "String"
    },
    "functiondomits7b73f586PreSignupName": {
      "Type": "String"
    },
    "functiondomits7b73f586PreSignupArn": {
      "Type": "String"
    },
    "functiondomits7b73f586PreSignupLambdaExecutionRole": {
      "Type": "String"
    }
  },
  "Conditions": {
    "ShouldNotCreateEnvResources": {
      "Fn::Equals": [
        {
          "Ref": "env"
        },
        "NONE"
      ]
    }
  },
  "Resources": {
    "UserPoolPreSignUpLambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "functiondomits7b73f586PreSignupName"
        },
        "Principal": "cognito-idp.amazonaws.com",
        "SourceArn": {
          "Ref": "userpoolArn"
        }
      }
    },
    "authTriggerFnServiceRole08093B67": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "authTriggerFnServiceRoleDefaultPolicyEC9285A8": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "cognito-idp:DescribeUserPool",
                "cognito-idp:UpdateUserPool"
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "userpoolArn"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "authTriggerFnServiceRoleDefaultPolicyEC9285A8",
        "Roles": [
          {
            "Ref": "authTriggerFnServiceRole08093B67"
          }
        ]
      }
    },
    "authTriggerFn7FCFA449": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "const response = require('cfn-response');\nconst {\n  CognitoIdentityProviderClient,\n  DescribeUserPoolCommand,\n  UpdateUserPoolCommand,\n} = require('@aws-sdk/client-cognito-identity-provider');\n\nexports.handler = (event, context) => {\n  // Don't return promise, response.send() marks context as done internally\n  void tryHandleEvent(event, context);\n};\n\nasync function tryHandleEvent(event, context) {\n  const physicalResourceId =\n    event.RequestType === 'Update' ? event.PhysicalResourceId : `${event.LogicalResourceId}-${event.ResourceProperties.userpoolId}`;\n  try {\n    await handleEvent(event);\n    response.send(event, context, response.SUCCESS, {}, physicalResourceId);\n  } catch (err) {\n    console.log(err.stack);\n    response.send(event, context, response.FAILED, { err }, physicalResourceId);\n  }\n}\n\nasync function handleEvent(event) {\n  const userPoolId = event.ResourceProperties.userpoolId;\n  const { lambdaConfig } = event.ResourceProperties;\n  const config = {};\n  const cognitoClient = new CognitoIdentityProviderClient({});\n  const userPoolConfig = await cognitoClient.send(new DescribeUserPoolCommand({ UserPoolId: userPoolId }));\n  const userPoolParams = userPoolConfig.UserPool;\n  // update userPool params\n\n  const updateUserPoolConfig = {\n    UserPoolId: userPoolParams.Id,\n    Policies: userPoolParams.Policies,\n    SmsVerificationMessage: userPoolParams.SmsVerificationMessage,\n    AccountRecoverySetting: userPoolParams.AccountRecoverySetting,\n    AdminCreateUserConfig: userPoolParams.AdminCreateUserConfig,\n    AutoVerifiedAttributes: userPoolParams.AutoVerifiedAttributes,\n    EmailConfiguration: userPoolParams.EmailConfiguration,\n    EmailVerificationMessage: userPoolParams.EmailVerificationMessage,\n    EmailVerificationSubject: userPoolParams.EmailVerificationSubject,\n    VerificationMessageTemplate: userPoolParams.VerificationMessageTemplate,\n    SmsAuthenticationMessage: userPoolParams.SmsAuthenticationMessage,\n    MfaConfiguration: userPoolParams.MfaConfiguration,\n    DeviceConfiguration: userPoolParams.DeviceConfiguration,\n    SmsConfiguration: userPoolParams.SmsConfiguration,\n    UserPoolTags: userPoolParams.UserPoolTags,\n    UserPoolAddOns: userPoolParams.UserPoolAddOns,\n  };\n\n  // removing undefined keys\n  Object.keys(updateUserPoolConfig).forEach((key) => updateUserPoolConfig[key] === undefined && delete updateUserPoolConfig[key]);\n\n  /* removing UnusedAccountValidityDays as deprecated\n    InvalidParameterException: Please use TemporaryPasswordValidityDays in PasswordPolicy instead of UnusedAccountValidityDays\n    */\n  if (updateUserPoolConfig.AdminCreateUserConfig && updateUserPoolConfig.AdminCreateUserConfig.UnusedAccountValidityDays) {\n    delete updateUserPoolConfig.AdminCreateUserConfig.UnusedAccountValidityDays;\n  }\n  lambdaConfig.forEach((lambda) => (config[`${lambda.triggerType}`] = lambda.lambdaFunctionArn));\n  if (event.RequestType === 'Delete') {\n    updateUserPoolConfig.LambdaConfig = {};\n    console.log(`${event.RequestType}:`, JSON.stringify(updateUserPoolConfig));\n    const result = await cognitoClient.send(new UpdateUserPoolCommand(updateUserPoolConfig));\n    console.log(`delete response data ${JSON.stringify(result)}`);\n  } else if (event.RequestType === 'Update' || event.RequestType === 'Create') {\n    updateUserPoolConfig.LambdaConfig = config;\n    const result = await cognitoClient.send(new UpdateUserPoolCommand(updateUserPoolConfig));\n    console.log(`createOrUpdate response data ${JSON.stringify(result)}`);\n  }\n}\n"
        },
        "Role": {
          "Fn::GetAtt": [
            "authTriggerFnServiceRole08093B67",
            "Arn"
          ]
        },
        "Handler": "index.handler",
        "Runtime": "nodejs18.x"
      },
      "DependsOn": [
        "authTriggerFnServiceRoleDefaultPolicyEC9285A8",
        "authTriggerFnServiceRole08093B67"
      ]
    },
    "CustomAuthTriggerResource": {
      "Type": "Custom::CustomAuthTriggerResourceOutputs",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "authTriggerFn7FCFA449",
            "Arn"
          ]
        },
        "userpoolId": {
          "Ref": "userpoolId"
        },
        "lambdaConfig": [
          {
            "triggerType": "PreSignUp",
            "lambdaFunctionName": "domits7b73f586PreSignup",
            "lambdaFunctionArn": {
              "Ref": "functiondomits7b73f586PreSignupArn"
            }
          }
        ],
        "nonce": "c148caae-53c7-4361-a7d6-6a7216fbc4ae"
      },
      "DependsOn": [
        "authTriggerFn7FCFA449",
        "authTriggerFnServiceRoleDefaultPolicyEC9285A8",
        "authTriggerFnServiceRole08093B67"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    }
  }
}